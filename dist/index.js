import ping from 'ping';
import { PrismaClient } from '@prisma/client';
import axios from 'axios';
import PQueue from 'p-queue';
const locations = new PQueue({ concurrency: 1 });
const prisma = new PrismaClient({
    log: [
        { level: 'error', emit: 'event' }
    ]
});
main().catch(async (e) => {
    console.error(e);
    await prisma.$disconnect();
    await new Promise((resolve) => setTimeout(resolve, 60000));
    process.exit(1);
});
function gethosts() {
    let hostss = '';
    if (process.env.Hostss1 !== undefined) {
        hostss += process.env.Hostss1;
    }
    if (process.env.Hostss2 !== undefined) {
        hostss += process.env.Hostss2;
    }
    if (process.env.Hostss3 !== undefined) {
        hostss += process.env.Hostss3;
    }
    if (process.env.Hostss4 !== undefined) {
        hostss += process.env.Hostss4;
    }
    if (process.env.Hostss5 !== undefined) {
        hostss += process.env.Hostss5;
    }
    if (process.env.Hostss6 !== undefined) {
        hostss += process.env.Hostss6;
    }
    return hostss;
}
async function main() {
    await prisma.$connect();
    prisma.$on('error', (e) => {
        console.log('Error: ');
        console.log(e);
    });
    await prisma.getPing.updateMany({
        where: {
            active: true
        },
        data: {
            active: false
        }
    });
    await overlist(gethosts().split(',') ?? []);
    await getlocations();
    await new Promise((resolve) => {
        locations.on('empty', () => { resolve(); });
    });
    await prisma.getPing.deleteMany({
        where: { active: false }
    });
    const data = await prisma.getPing.findMany({
        select: { name: true },
        where: { active: true }
    });
    setInterval(() => { void overlist(data.map(value => value.name)); }, 60000);
}
async function getlocations() {
    const all = await prisma.getPing.findMany({
        where: {
            OR: [
                { longitude: null },
                { latitude: null },
                { country: null }
            ]
        }
    });
    all.map(async (value) => {
        await locations.add(async () => {
            const { data } = await axios.get(`https://ipapi.co/${value.ip}/json`);
            if (data.longitude === null || data.latitude === null || data.country_name === null) {
                await prisma.getPing.update({
                    where: { name: value.name },
                    data: {
                        active: false
                    }
                });
            }
            else {
                await prisma.getPing.update({
                    where: { name: value.name },
                    data: {
                        longitude: data.longitude,
                        latitude: data.latitude,
                        country: data.country_name
                    }
                });
            }
            await new Promise((resolve) => setTimeout(resolve, 2000));
        });
    });
}
async function overlist(data) {
    await new Promise((resolve) => {
        data.map(async (value, index, array) => {
            await doPinging(value);
            if (index === array.length - 1) {
                resolve();
            }
        });
    });
}
async function doPinging(value) {
    const pingg = await ping.promise.probe(value);
    const matc = pingg.output.match(/((?:(?:25[0-5]|(?:2[0-4]|1\d|[1-9]|)\d)\.?\b){4})/);
    const address = matc !== null ? matc[0] : undefined;
    const time = pingg.time === 'unknown' ? undefined : pingg.time;
    if (address !== undefined) {
        await prisma.getPing.upsert({
            where: { name: value },
            update: {
                lastPing: time === undefined ? null : time,
                active: true
            },
            create: {
                ip: address,
                lastPing: time,
                name: value,
                active: true
            }
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFBO0FBQ3ZCLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQTtBQUM3QyxPQUFPLEtBQUssTUFBTSxPQUFPLENBQUE7QUFDekIsT0FBTyxNQUFNLE1BQU0sU0FBUyxDQUFBO0FBRTVCLE1BQU0sU0FBUyxHQUFHLElBQUksTUFBTSxDQUFDLEVBQUUsV0FBVyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUE7QUFnQ2hELE1BQU0sTUFBTSxHQUFHLElBQUksWUFBWSxDQUFDO0lBQzVCLEdBQUcsRUFBRTtRQUNELEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFO0tBQ3BDO0NBQ0osQ0FBQyxDQUFBO0FBRUYsSUFBSSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRTtJQUNyQixPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ2hCLE1BQU0sTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFBO0lBQzFCLE1BQU0sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQTtJQUMxRCxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ25CLENBQUMsQ0FBQyxDQUFBO0FBRUYsU0FBUyxRQUFRO0lBQ2IsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFBO0lBQ2YsSUFBRyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sS0FBSyxTQUFTLEVBQUM7UUFDakMsTUFBTSxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFBO0tBQ2hDO0lBQ0QsSUFBRyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sS0FB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